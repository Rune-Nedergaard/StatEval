# Create jpg file path for plots by providing a plot name
getJpgFilePath <- function(plot_name) {
plots_path <- "plots"
file_type <- "jpg"
path <- paste(paste(plots_path, plot_name, sep="/"), file_type, sep=".")
}
getDist3d <- function(v1, v2) {
dist <- sqrt((v2[1] - v1[1])^2 + (v2[2]- v1[2])^2 + (v2[3]- v1[3])^2)
return(dist)
}
# Load cleaned data
armdata <- readRDS("armdata_cleaned.rds")
armdata[[1]][[1]]
# Define experiment setups
exp_setups <- data.frame(exp1 = c(15.0, 20),
exp2 = c(15.0, 27.5),
exp3 = c(15.0, 35),
exp4 = c(22.5, 20),
exp5 = c(22.5, 27.5),
exp6 = c(22.5, 35),
exp7 = c(30.0, 20),
exp8 = c(30.0, 27.5),
exp9 = c(30.0, 35),
exp10 = c(37.5, 20),
exp11 = c(47.5, 27.5),
exp12 = c(37.5, 35),
exp13 = c(45.0, 20),
exp14 = c(45.0, 27.5),
exp15 = c(45.0, 35),
exp16 = c(0,0)
)
# Set experiment setup names
row.names(exp_setups) <- c("d","obstacle_height")
# number of experiments (first layer )
n_experiments <- length(armdata);n_experiments
# number of persons (second layer)
n_participants <- length(armdata[[1]]
);n_participants
# number of repetitions (third layer)
n_repetitions <- length(armdata[[1]][[1]]);n_repetitions
# Matrix of path stats
paths <- c()
# Loop through experiments
for (i in 1:n_experiments){
# Loop through participants
for (j in 1:length(armdata[[i]])){
# Loop through repetitions
for (k in 1:length(armdata[[i]][[j]])){
# Define repetition
repetition <- armdata[[i]][[j]][[k]]
# Define coordinates
x <- repetition[,1]
y <- repetition[,2]
z <- repetition[,3]
x_cords <- rep(0,100)
y_cords <- rep(0,100)
z_cords <- rep(0,100)
x_cords <- I(list(x))
y_cords <- I(list(y))
z_cords <- I(list(z))
# Get x-value of highest point on path (vertex of path)
x_vertex <- repetition[which.max(z), 1]
# Get z-value of highest point on path (vertex of path)
z_vertex <- repetition[which.max(z), 3]
# Calculate y-value range
y_range <- abs(max(y) - min(y))
# y standard deviation
y_std <- sd(y)
z_min <- min(repetition[,3])
# Calculate path height (diference between max and min height)
path_height <- max(z) - min(z)
# Define distance between object and
d <- exp_setups[[i]][[1]]
# Define obstacle height
obstacle_height <- exp_setups[[i]][[2]]
curve_dist <- 0
prev_point <- NA
# Loop through all points and sum distance between points
for (n in 1:nrow(repetition)){
if (!is.na(sum(prev_point))){
curve_dist <- curve_dist + getDist3d(repetition[n,], prev_point)
}
prev_point <- repetition[n,]
}
paths <- rbind(paths, c(i, d, obstacle_height, j, k, path_height, z_vertex, x_vertex, y_range, y_std, z_min, curve_dist, x_cords, y_cords, z_cords))
}
}
}
# Crate dataframe from matrix
paths <- data.frame(paths)
# Add column names
colnames(paths) <- c("Experiment", "d" , "obstacleHeight", "Person", "Repetition", "pathHeight", "zVertex", "xVertex", "yRange", "yStd", "zMin", "pathDist", "xCords", "yCords", "zCords")
head(paths)
# Create jpg file path for plots by providing a plot name
getJpgFilePath <- function(plot_name) {
plots_path <- "plots"
file_type <- "jpg"
path <- paste(paste(plots_path, plot_name, sep="/"), file_type, sep=".")
}
getDist3d <- function(v1, v2) {
dist <- sqrt((v2[1] - v1[1])^2 + (v2[2]- v1[2])^2 + (v2[3]- v1[3])^2)
return(dist)
}
setwd("~/GitHub/StatEval")
# Create jpg file path for plots by providing a plot name
getJpgFilePath <- function(plot_name) {
plots_path <- "plots"
file_type <- "jpg"
path <- paste(paste(plots_path, plot_name, sep="/"), file_type, sep=".")
}
getDist3d <- function(v1, v2) {
dist <- sqrt((v2[1] - v1[1])^2 + (v2[2]- v1[2])^2 + (v2[3]- v1[3])^2)
return(dist)
}
# Load cleaned data
armdata <- readRDS("armdata_cleaned.rds")
armdata[[1]][[1]]
# Define experiment setups
exp_setups <- data.frame(exp1 = c(15.0, 20),
exp2 = c(15.0, 27.5),
exp3 = c(15.0, 35),
exp4 = c(22.5, 20),
exp5 = c(22.5, 27.5),
exp6 = c(22.5, 35),
exp7 = c(30.0, 20),
exp8 = c(30.0, 27.5),
exp9 = c(30.0, 35),
exp10 = c(37.5, 20),
exp11 = c(47.5, 27.5),
exp12 = c(37.5, 35),
exp13 = c(45.0, 20),
exp14 = c(45.0, 27.5),
exp15 = c(45.0, 35),
exp16 = c(0,0)
)
# Set experiment setup names
row.names(exp_setups) <- c("d","obstacle_height")
# number of experiments (first layer )
n_experiments <- length(armdata);n_experiments
# number of persons (second layer)
n_participants <- length(armdata[[1]]
);n_participants
# number of repetitions (third layer)
n_repetitions <- length(armdata[[1]][[1]]);n_repetitions
# Matrix of path stats
paths <- c()
# Loop through experiments
for (i in 1:n_experiments){
# Loop through participants
for (j in 1:length(armdata[[i]])){
# Loop through repetitions
for (k in 1:length(armdata[[i]][[j]])){
# Define repetition
repetition <- armdata[[i]][[j]][[k]]
# Define coordinates
x <- repetition[,1]
y <- repetition[,2]
z <- repetition[,3]
x_cords <- rep(0,100)
y_cords <- rep(0,100)
z_cords <- rep(0,100)
x_cords <- I(list(x))
y_cords <- I(list(y))
z_cords <- I(list(z))
# Get x-value of highest point on path (vertex of path)
x_vertex <- repetition[which.max(z), 1]
# Get z-value of highest point on path (vertex of path)
z_vertex <- repetition[which.max(z), 3]
# Calculate y-value range
y_range <- abs(max(y) - min(y))
# y standard deviation
y_std <- sd(y)
z_min <- min(repetition[,3])
# Calculate path height (diference between max and min height)
path_height <- max(z) - min(z)
# Define distance between object and
d <- exp_setups[[i]][[1]]
# Define obstacle height
obstacle_height <- exp_setups[[i]][[2]]
curve_dist <- 0
prev_point <- NA
# Loop through all points and sum distance between points
for (n in 1:nrow(repetition)){
if (!is.na(sum(prev_point))){
curve_dist <- curve_dist + getDist3d(repetition[n,], prev_point)
}
prev_point <- repetition[n,]
}
paths <- rbind(paths, c(i, d, obstacle_height, j, k, path_height, z_vertex, x_vertex, y_range, y_std, z_min, curve_dist, x_cords, y_cords, z_cords))
}
}
}
# Crate dataframe from matrix
paths <- data.frame(paths)
# Add column names
colnames(paths) <- c("Experiment", "d" , "obstacleHeight", "Person", "Repetition", "pathHeight", "zVertex", "xVertex", "yRange", "yStd", "zMin", "pathDist", "xCords", "yCords", "zCords")
head(paths)
# Define variables as factors
paths$Experiment <- as.factor(paths$Experiment)
paths$Person <- as.factor(paths$Person)
paths$Repetition <- as.factor(paths$Repetition)
#Also made these factor
paths$obstacleHeight <- as.factor(paths$obstacleHeight)
paths$d <- as.factor(paths$d)
L <- lm(Experiment ~ pathDist, data = paths)
anova(L)
paths$xCords
head(paths)
head(paths)
paths[[1]]
