load('armdata.RData')
repetitions <- 10
participants <- 10
experiments <- 16
y <- as.matrix(read.table('armTrajectories.dat'))
dim(y) <- c(nrow(y), 3, repetitions , participants , experiments)
yvelo <- as.matrix(read.table('armVelocity.dat'))
dim(yvelo) <- c(nrow(yvelo), 3, repetitions , participants , experiments)
#load data
load('armdata.RData')
setwd("~/GitHub/StatEval")
#load data
load('armdata.RData')
repetitions <- 10
participants <- 10
experiments <- 16
y <- as.matrix(read.table('armTrajectories.dat'))
dim(y) <- c(nrow(y), 3, repetitions , participants , experiments)
yvelo <- as.matrix(read.table('armVelocity.dat'))
dim(yvelo) <- c(nrow(yvelo), 3, repetitions , participants , experiments)
View(armdata)
#load data
y <- as.matrix(load('armdata.RData'))
y
View(armdata)
y <- as.matrix(armdata)
y
View(y)
summary(y)
y[1]
repetitions <- 10
participants <- 10
experiments <- 16
dim(y) <- c(nrow(y), 3, repetitions , participants , experiments)
yvelo <- as.matrix(read.table('armVelocity.dat'))
dim(yvelo) <- c(nrow(yvelo), 3, repetitions , participants , experiments)
dim(y) <- c(nrow(y), 3, repetitions , participants , experiments)
View(y)
data <- as.matrix(armdata)
a
#load data
load('armdata.RData')
data <- as.matrix(armdata)
s <- c() # Make a matrix of our path statistics
e <- 1
for (experiment in armdata) {
p <- 1
for (person in experiment) {
r <- 1
for (repetition in person) {
repetition[is.na(repetition)] <- 0 # Remove NAs
z.max <- max(repetition[,3])
x.argmax <- which.max(repetition[,3])
x.max <- repetition[x.argmax, 1]
y.range <- abs(max(repetition[,2]) - min(repetition[,2]))
y.std <- sd(repetition[,2])
z.min <- min(repetition[,3])
h <- z.max - z.min
s <- rbind(s, c(e, p, r, h, z.max, x.max, y.range, y.std, z.min))
r <- r + 1
}
p <- p + 1
}
e <- e + 1
}
# Make a nice data frame
s <- data.frame(s)
colnames(s) <- c("Exp", "Per", "Rep", "height", "z_max", "x", "y_range", "y_std", "z_min")
s$Exp <- as.factor(s$Exp)
s$Per <- as.factor(s$Per)
s$Rep <- as.factor(s$Rep)
boxplot(s$height ~ s$Exp)
hist(s$x, breaks=40)
l <- lm(s$height ~ s$Exp)
anova(l)
par(mfrow=c(2, 2))
boxplot(s$height ~ s$Exp)
boxplot(s$height ~ s$Per)
boxplot(s$x ~ s$Exp)
boxplot(s$x ~ s$Per)
par(mfrow=c(1,1))
interaction.plot(s$Exp, s$Per, s$height)
# P-adjust using method
p.adjust(c(2.2e-16,2.2e-16), method = "Hochberg")
# P-adjust using method
p.adjust(c(2.2e-16,2.2e-16), method = 'HB')
# P-adjust using method
p.adjust(c(2.2e-16,2.2e-16), method = 'hochberg')
armdata
View(repetition)
s$x
boxplot(s$x ~ s$Exp)
boxplot(s$x ~ s$Per)
par(mfrow=c(1,1))
interaction.plot(s$Exp, s$Per, s$height)
boxplot(s$height ~ s$Exp)
boxplot(s$height ~ s$Per)
anova(l)
L2 <- lm(s$Per ~ s$x*s$y_range*s$z_max )
plot(s$Per,s$z_max)
barplot(s$Per,s$z_max)
plot(s$Per,s$z_max)
plot(s$Per,s$x)
install.packages(ggplot2)
install.packages("tidyverse")
#load data
load('armdata.RData')
### below is taken from: https://gitlab.gbar.dtu.dk/s183897_s183926_s183924/Project_1 ###
data <- as.matrix(armdata)
s <- c() # Make a matrix of our path statistics
e <- 1
for (experiment in armdata) {
p <- 1
for (person in experiment) {
r <- 1
for (repetition in person) {
repetition[is.na(repetition)] <- 0 # Remove NAs
z.max <- max(repetition[,3])
x.argmax <- which.max(repetition[,3])
x.max <- repetition[x.argmax, 1]
y.range <- abs(max(repetition[,2]) - min(repetition[,2]))
y.std <- sd(repetition[,2])
z.min <- min(repetition[,3])
h <- z.max - z.min
s <- rbind(s, c(e, p, r, h, z.max, x.max, y.range, y.std, z.min))
r <- r + 1
}
p <- p + 1
}
e <- e + 1
}
# Make a nice data frame
s <- data.frame(s)
colnames(s) <- c("Exp", "Per", "Rep", "height", "z_max", "x", "y_range", "y_std", "z_min")
s$Exp <- as.factor(s$Exp)
s$Per <- as.factor(s$Per)
s$Rep <- as.factor(s$Rep)
boxplot(s$height ~ s$Exp)
hist(s$x, breaks=40)
l <- lm(s$height ~ s$Exp)
anova(l)
par(mfrow=c(2, 2))
boxplot(s$height ~ s$Exp)
boxplot(s$height ~ s$Per)
boxplot(s$x ~ s$Exp)
boxplot(s$x ~ s$Per)
par(mfrow=c(1,1))
interaction.plot(s$Exp, s$Per, s$height)
# P-adjust using method
p.adjust(c(2.2e-16,2.2e-16), method = 'hochberg')
L2 <- lm(s$Per ~ s$x*s$y_range*s$z_max )
plot(s$Per,s$x)
library(ggplot2)
library(cowplot)
install.packages(cowplot)
install.packages("cowplot")
library(cowplot)
