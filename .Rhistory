x <- runif(40, min = -1, max = 1)
x
y <- rnorm(40, mean = 0.3*x, sd = 0.16)
plot(x,y)
L <- lm(x,y)
L <- lm(x~y)
plot(model)
plot(L)
L$coefficients
plot(x,y)
abline(L)
plot(x,y)
abline(L$coefficients)
dat <- rep(NA,1000)
summary(x)
t(replicate(5, sample(x, replace=TRUE)))
k <- 100000
simsamples <- replicate(k, sample(x, replace=TRUE))
simmeans <- apply(simsamples, 2, mean)
quantile(simmeans, c(0.025,0.975))
k <- 10
simsamples <- replicate(k, sample(x, replace=TRUE))
simmeans <- apply(simsamples, 2, mean)
quantile(simmeans, c(0.025,0.975))
simmeans
n <- 1000
slopes <- rep(NA,n)
for (i in 1:n){
simsample <- sample(x, replace=TRUE)
y <- rnorm(40, mean = 0.3*simsample, sd = 0.16)
L <- lm(simsample ~ y)
slopes[i] <- coef(L)[2]
}
hist(slopes)
quantile(slopes, c(0.025,0.975))
#99% CI for slope
quantile(slopes, c(0.005,0.995))
x <- runif(40, min = -1, max = 1)
y <- rnorm(40, mean = 0.3*x, sd = 0.16)
L0 <- lm(x~y)
abline(coef(L0)[2])
abline(v=coef(L0)[2])
abline(v=coef(L0)[2], col="blue")
orgslope <- coef(L0)[2]
orgslope
t.test(orgslope,slopes)
t.test(slopes)
L0
x <- runif(40, min = -1, max = 1)
y <- rnorm(40, mean = 0.3*x, sd = 0.16)
plot(x,y)
L0 <- lm(x~y)
orgslope <- coef(L0)[1]
plot(x,y)
abline(L$coefficients)
## Part 1 ###
n <- 1000
slopes <- rep(NA,n)
for (i in 1:n){
simsample <- sample(x, replace=TRUE)
y <- rnorm(40, mean = 0.3*simsample, sd = 0.16)
L <- lm(simsample ~ y)
slopes[i] <- coef(L)[1]
}
hist(slopes)
abline(v=coef(L0)[2], col="blue")
#95% CI for slope
quantile(slopes, c(0.025,0.975))
#99% CI for slope
quantile(slopes, c(0.005,0.995))
t.test(slopes)
t.test?
t.test(slopes)$
?t.test
?t.test
t.test(slopes)[1]
t.test(slopes)[2]
t.test(slopes)[3]
t.test(slopes)[4]
t.test(slopes)[[4]]
t.test(slopes)$conf.int
5% CI for slope
quantile(slopes, c(0.025,0.975))
#99% CI for slope
quantile(slopes, c(0.005,0.995))
hist(slopes)
abline(v=coef(L0)[1], col="blue")
quantile(slopes, c(0.025,0.975))
hist(slopes)
abline(v=conf95, col="blue")
abline(v=conf99, col="red")
hist(slopes)
abline(v=coef(L0)[1], col="blue")
#95% CI for slope
conf95 <- quantile(slopes, c(0.025,0.975))
#99% CI for slope
conf99 <- quantile(slopes, c(0.005,0.995))
hist(slopes)
abline(v=conf95, col="blue")
abline(v=conf99, col="red")
x <- runif(40, min = -1, max = 1)
y <- rnorm(40, mean = 0.3*x, sd = 0.16)
plot(x,y)
L0 <- lm(x~y)
orgslope <- coef(L0)[1]
plot(x,y)
abline(L$coefficients)
## Part 1 ###
n <- 1000
slopes <- rep(NA,n)
for (i in 1:n){
simsamplex <- sample(x, replace=TRUE)
simsapley <- sample(y, replace=TRUE)
L <- lm(simsamplex ~ simsampley)
slopes[i] <- coef(L)[1]
}
hist(slopes)
abline(v=coef(L0)[1], col="blue")
L0 <- lm(x~y)
L0 <- lm(x~y)
orgslope <- coef(L0)[1]
x <- runif(40, min = -1, max = 1)
y <- rnorm(40, mean = 0.3*x, sd = 0.16)
plot(x,y)
L0 <- lm(x~y)
orgslope <- coef(L0)[1]
plot(x,y)
abline(L$coefficients)
## Part 1 ###
n <- 1000
slopes <- rep(NA,n)
for (i in 1:n){
simsamplex <- sample(x, replace=TRUE)
simsapley <- sample(y, replace=TRUE)
L <- lm(simsamplex ~ simsampley)
slopes[i] <- coef(L)[1]
}
hist(slopes)
abline(v=coef(L0)[1], col="blue")
#95% CI for slope
conf95 <- quantile(slopes, c(0.025,0.975))
#99% CI for slope
conf99 <- quantile(slopes, c(0.005,0.995))
hist(slopes)
abline(v=conf95, col="blue")
abline(v=conf99, col="red")
hist(slopes)
## Part 1 ###
n <- 1000
slopes <- rep(NA,n)
for (i in 1:n){
simsamplex <- sample(x, replace=TRUE)
simsapley <- sample(y, replace=TRUE)
L <- lm(simsamplex ~ simsampley)
slopes[i] <- coef(L)[1]
}
hist(slopes)
x <- runif(40, min = -1, max = 1)
y <- rnorm(40, mean = 0.3*x, sd = 0.16^2)
plot(x,y)
L0 <- lm(x~y)
orgslope <- coef(L0)[1]
plot(x,y)
abline(L$coefficients)
## Part 1 ###
n <- 1000
slopes <- rep(NA,n)
## Part 1 ###
n <- 1000
slopes <- rep(NA,n)
for (i in 1:n){
simsamplex <- sample(x, replace=TRUE)
simsampley <- sample(y, replace=TRUE)
L <- lm(simsamplex ~ simsampley)
slopes[i] <- coef(L)[1]
}
hist(slopes)
abline(v=coef(L0)[1], col="blue")
#95% CI for slope
conf95 <- quantile(slopes, c(0.025,0.975))
#99% CI for slope
conf99 <- quantile(slopes, c(0.005,0.995))
hist(slopes)
abline(v=conf95, col="blue")
abline(v=conf99, col="red")
#95% CI for slope
conf95 <- quantile(slopes, c(0.025,0.975))
#99% CI for slope
conf99 <- quantile(slopes, c(0.005,0.995))
hist(slopes)
abline(v=conf95, col="blue")
abline(v=conf99, col="red")
#confidence interval
t.test(slopes)$conf.int
#confidence interval
t.test(slopes)
#confidence interval
t.test(slopes)$conf.int
#confidence interval
ttestconfint <- t.test(slopes)$conf.int
abline(v=ttestconfint, col = 'yellow')
x <- runif(40, min = -1, max = 1)
y <- rnorm(40, mean = 0.3*x, sd = 0.16^2)
plot(x,y)
L0 <- lm(x~y)
orgslope <- coef(L0)[1]
plot(x,y)
abline(L$coefficients)
x <- runif(40, min = -1, max = 1)
y <- rnorm(40, mean = 0.3*x, sd = 0.16^2)
plot(x,y)
L0 <- lm(x~y)
orgslope <- coef(L0)[1]
plot(x,y)
abline(L0$coefficients)
## Part 1 ###
n <- 1000
slopes <- rep(NA,n)
for (i in 1:n){
simsamplex <- sample(x, replace=TRUE)
simsampley <- sample(y, replace=TRUE)
L <- lm(simsamplex ~ simsampley)
slopes[i] <- coef(L)[1]
}
hist(slopes)
abline(v=coef(L0)[1], col="blue")
#95% CI for slope
conf95 <- quantile(slopes, c(0.025,0.975))
#99% CI for slope
conf99 <- quantile(slopes, c(0.005,0.995))
hist(slopes)
abline(v=conf95, col="blue")
abline(v=conf99, col="red")
abline(v=ttestconfint, col = 'yellow')
#confidence interval
ttestconfint <- t.test(slopes)$conf.int
confint()
t.test(slopes)
confint(slopes)
perm <- sample(16)
tvals <- rep(NA, 1000)
for (i in 1:1000) { # Try 1000 random permutations
perm <- sample(40) # random permutation
x.tilde <- x[perm]
tvals[i] <- tfun(x.tilde)
}
permslopes <- rep(NA, 1000)
for (i in 1:1000) { # Try 1000 random permutations
x_perm <- x[sample(40,replace=F)]
L <- lm(y ~ x_perm)
permslopes[i] <- coef(L)[1]
}
L
permslopes <- rep(NA, 1000)
for (i in 1:1000) { # Try 1000 random permutations
x_perm <- x[sample(40,replace=F)]
L <- lm(y ~ x_perm)
permslopes[i] <- coef(L)[2]
}
L
hist(permslopes)
L_true <- lm(x~y)
beta_true <- coef(L_true)[2]
hist(permslopes, col =2, breaks = 100)
ablone(v = beta_true, col = "blue", lwd =2)
abline(v = beta_true, col = "blue", lwd =2)
abline(v = beta_true, col = "blue")
beta_true <- coef(L_true)[2]
hist(permslopes, col =2, breaks = 100)
abline(v = beta_true, col = "blue")
abline(v = beta_true, col = "blue", lwd =20)
beta_true <- coef(L_true)[2]
bet_true
beta_true
abline(v = beta_true, col = "blue", lwd =20)
hist(permslopes)
abline(v = beta_true, col = "blue", lwd =20)
t.test(permslopes)
setwd("~/GitHub/StatEval")
load('armdata.RdData')
load("C:/Users/rune7/Documents/GitHub/StatEval/armdata.RData")
load('armdata.RData')
#load data
data <- load('armdata.RData')
summary(data)
View(armdata)
#load data
load('armdata.RData')
summary(armdata)
View(armdata)
armdata[1]
armdata[1][1]
armdata[1][1][1]
armdata[1,1]
armdata[[1]]
armdata[[[1]]
armdata[[[1]]]
armdata[1][1][1]
armdata[1][1][1][1]
armdata[1][1][1][1][1][1][1][1][1][1]
library(rgl)
devtools::install_github("dmurdoch/rgl")
git clone https://github.com/dmurdoch/rgl.git
install.packages("C:/Users/rune7/Downloads/rgl_0.108.3.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/rune7/Downloads/rgl_0.108.3.zip", repos = NULL, type = "win.binary")
install.packages("rgl")
library(rgl)
start_cyl <- cylinder3d(cbind(0, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
target_cyl <- cylinder3d(cbind(60, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl1 <- cylinder3d(cbind(0, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl2 <- cylinder3d(cbind(60, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl3 <- cylinder3d(cbind(30, 0, seq(0, 20, length = 10)), radius = c(3,3,3), sides = 10, closed = -2)
shade3d(addNormals(subdivision3d(start_cyl)), col = ’darkgreen’)
shade3d(addNormals(subdivision3d(target_cyl)), col = ’darkgreen’)
shade3d(addNormals(subdivision3d(cyl1)), col = ’pink’)
shade3d(addNormals(subdivision3d(cyl2)), col = ’pink’, alpha = 0.5)
shade3d(addNormals(subdivision3d(cyl3)), col = ’lightblue’)
surface3d(c(-7, 67), c(-20, 20), matrix(0, 2, 2), col = "brown", alpha = 0.9, specular = "black")
lines3d(armdata[[7]][[1]][[1]])
library(rgl)
start_cyl <- cylinder3d(cbind(0, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
target_cyl <- cylinder3d(cbind(60, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl1 <- cylinder3d(cbind(0, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl2 <- cylinder3d(cbind(60, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl3 <- cylinder3d(cbind(30, 0, seq(0, 20, length = 10)), radius = c(3,3,3), sides = 10, closed = -2)
surface3d(c(-7, 67), c(-20, 20), matrix(0, 2, 2), col = "brown", alpha = 0.9, specular = "black")
lines3d(armdata[[7]][[1]][[1]])
install.packages("shade3d")
install.packages("shade3d", dependencies=TRUE, repos='http://cran.rstudio.com/')
start_cyl <- cylinder3d(cbind(0, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
target_cyl <- cylinder3d(cbind(60, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl1 <- cylinder3d(cbind(0, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl2 <- cylinder3d(cbind(60, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl3 <- cylinder3d(cbind(30, 0, seq(0, 20, length = 10)), radius = c(3,3,3), sides = 10, closed = -2)
shade3d(addNormals(subdivision3d(start_cyl)), col = ’darkgreen’)
shade3d(addNormals(subdivision3d(target_cyl)), col = ’darkgreen’)
shade3d(addNormals(subdivision3d(cyl1)), col = ’pink’)
shade3d(addNormals(subdivision3d(cyl2)), col = ’pink’, alpha = 0.5)
shade3d(addNormals(subdivision3d(cyl3)), col = ’lightblue’)
surface3d(c(-7, 67), c(-20, 20), matrix(0, 2, 2), col = "brown", alpha = 0.9, specular = "black")
lines3d(armdata[[7]][[1]][[1]])
#load data
load('armdata.RData')
library(rgl)
start_cyl <- cylinder3d(cbind(0, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
target_cyl <- cylinder3d(cbind(60, 0, seq(0, 10, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl1 <- cylinder3d(cbind(0, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl2 <- cylinder3d(cbind(60, 0, 10 + seq(0, 12.5, length = 10)), radius = c(3,3,3), sides = 20, closed = -2)
cyl3 <- cylinder3d(cbind(30, 0, seq(0, 20, length = 10)), radius = c(3,3,3), sides = 10, closed = -2)
shade3d(addNormals(subdivision3d(start_cyl)), col = 'darkgreen')
shade3d(addNormals(subdivision3d(target_cyl)), col = 'darkgreen')
shade3d(addNormals(subdivision3d(cyl1)), col = 'pink')
shade3d(addNormals(subdivision3d(cyl2)), col = 'pink', alpha = 0.5)
shade3d(addNormals(subdivision3d(cyl3)), col = 'lightblue')
surface3d(c(-7, 67), c(-20, 20), matrix(0, 2, 2), col = "brown", alpha = 0.9, specular = "black")
lines3d(armdata[[7]][[1]][[1]])
armdata[[7]][[1]][[1]]
View(armdata)
